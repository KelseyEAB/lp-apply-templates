// ================
// Custom Mixins
// ================


// Button Color Mixin - (used on _buttons.scss)
// -- Update Colors with Brand Colors -- //
@mixin buttonColor (
  $_c-buttonColor: $c-black,
  $_c-buttonHoverColor: $c-white,
  $_c-buttonTextColor: $c-white,
  $_c-buttonTextColorHover: $c-black,
  $_c-buttonBorderColorIntial: $c-black,
  $_c-buttonBorderColorHover: $c-black) {

  background: $_c-buttonColor;
  color: $_c-buttonTextColor;
  border: 1px solid $_c-buttonBorderColorIntial;

  &:hover,
  &:focus {
    background: $_c-buttonHoverColor;
    color: $_c-buttonTextColorHover;
    border: 1px solid $_c-buttonBorderColorHover;
  }
}


// Container Style Mixin
@mixin containerStyle ($_c-backgroundColor: $c-white, $_x-border: "null", $_x-boxShadow: "null") {

	background: $_c-backgroundColor;
	@include fluidRem("padding", 1rem 1.25rem, 1.75rem 2rem);

  @if $_x-border == "yes" {
    border: 1px solid $_c-borderColor;
  }

  @if $_x-boxShadow == "yes" {
    box-shadow: 0 0 15px rgba($c-black, .2);
  }
}


@mixin gridItems($_x-number: "null", $_mq-small: $mq-600, $_mq-large: $mq-1000,  $_x-gridGapSmall: 1rem, $_x-gridGapLarge: 1rem) {
  
  @media (min-width: $_mq-small) {
    display: grid;
    grid-gap: $_x-gridGapSmall;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: repeat(auto, auto);

    @if $_x-number == "odd" {
      li {
        &:last-child {
          grid-column: 1 / 3;
        }
      }
    }
  }

  @media (min-width: $_mq-large) {
    grid-gap: $_x-gridGapLarge;
    

    @if $_x-number == "3" {
      li {
        &:last-child {
          grid-column: 1 / 3;
        }
      }
    }

    @elseif $_x-number == "4" {
      grid-template-columns: repeat(4, 1fr);
      grid-template-rows: 1fr;
    }
  }

}